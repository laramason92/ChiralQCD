(*********************************************************************************************)
(******     This is the FeynRules mod-file for chiral QCD                               ******)
(******                                                                                 ******)
(******     Authors: L. Mason, B. Fuks                                                  ******)
(******                                                                                 ******)
(*********************************************************************************************)


M$ModelName = "ChiralQCD";

M$Information = {
   Authors -> {"L. Mason", "B. Fuks"}, Institutions -> {"University of Johannesburg", "LPTHE/Sorbonne U."},  Emails -> {"lara.mason@live.com", "fuks@lpthe.jussieu.fr"},
   Date -> "28.08.2019", Version -> "1.1" };

(* -------------------------------- *)
(* -------- Gauge Groups ---------- *)
(* -------------------------------- *)
M$GaugeGroups = {
  U1Y  == { Abelian -> True,  CouplingConstant -> g1, GaugeBoson -> B,  Charge -> Y },
  SU2L == { Abelian -> False, CouplingConstant -> g2, GaugeBoson -> Wi, Representations -> {Ta,SU2D},  StructureConstant -> Eps,
            Definitions -> {Ta[a_,b_,c_]->PauliSigma[a,b,c]/2, FSU2L[i_,j_,k_]:> I Eps[i,j,k]} },
  SU3C == { Abelian -> False, CouplingConstant -> gs, GaugeBoson -> G,  Representations -> {T,Colour}, StructureConstant -> f, SymmetricTensor -> dSUN }
};

(* -------------------------------- *)
(* ---------- Indices  ------------ *)
(* -------------------------------- *)
IndexRange[Index[SU2W      ]] = Unfold[Range[3]];     IndexStyle[SU2W,       j];
IndexRange[Index[SU2D      ]] = Unfold[Range[2]];     IndexStyle[SU2D,       k];
IndexRange[Index[Gluon     ]] = NoUnfold[Range[8]];   IndexStyle[Gluon,      a];
IndexRange[Index[Colour    ]] = NoUnfold[Range[3]];   IndexStyle[Colour,     m];
IndexRange[Index[Generation]] = Range[3];             IndexStyle[Generation, f];
IndexRange[Index[Scalar    ]] = Range[2];             IndexStyle[Scalar,     s];

(* -------------------------------- *)
(* --------- Int. Orders  --------- *)
(* -------------------------------- *)
M$InteractionOrderHierarchy = { {QCD, 1}, {QED, 2} };

(* -------------------------------- *)
(* ------- Particle Classes  -------*)
(* -------------------------------- *)
M$ClassesDescription = {
  (* Gauge bosons: physical vector fields *)
  V[1] == { ClassName -> A, SelfConjugate -> True,  Mass -> 0,               Width -> 0,            PDG -> 22},
  V[2] == { ClassName -> Z, SelfConjugate -> True,  Mass -> {MZ, 91.1876},   Width -> {WZ, 2.4952}, PDG -> 23},
  V[3] == { ClassName -> W, SelfConjugate -> False, Mass -> {MW, Internal},  Width -> {WW, 2.085},  PDG -> 24, QuantumNumbers -> {Q -> 1}},
  V[4] == { ClassName -> G, SelfConjugate -> True,  Mass -> 0,               Width -> 0,            PDG -> 21, Indices -> {Index[Gluon]}},

  (* Gauge bosons: unphysical vector fields *)
  V[11] == { ClassName -> B,  SelfConjugate -> True, Unphysical -> True,
             Definitions -> { B[mu_] -> -sw Z[mu]+cw A[mu]} },
  V[12] == { ClassName -> Wi, SelfConjugate -> True, Unphysical -> True, Indices -> {Index[SU2W]}, FlavorIndex -> SU2W,
             Definitions -> { Wi[mu_,1] -> (Wbar[mu]+W[mu])/Sqrt[2], Wi[mu_,2] -> (Wbar[mu]-W[mu])/(I*Sqrt[2]), Wi[mu_,3] -> cw Z[mu] + sw A[mu]}},

  (* Pseudoscalar mesons in the gauge basis *)
  S[11] == { ClassName -> Pii,   SelfConjugate -> True,  Unphysical -> True, Indices -> {Index[SU2W]}, FlavorIndex -> SU2W,
             Definitions -> { Pii[1] -> (pibar+pi)/Sqrt[2], pii[2] -> (pibar-pi)/(i*Sqrt[2]), pii[3] -> pi0}},
  S[12] == { ClassName -> Kai,   SelfConjugate -> False, Unphysical -> True, Indices -> {Index[SU2D]}, FlavorIndex -> SU2D,
             Definitions -> { Kai[1] -> ka, Ka[2] -> ka0}},
  S[13] == { ClassName -> eta8, SelfConjugate -> True, Unphysical -> True, Definitions -> { eta8 ->  cth eta + sth etap}},
  S[14] == { ClassName -> eta0, SelfConjugate -> True, Unphysical -> True, Definitions -> { eta0 -> -sth eta + cth etap}},

  (* Pseudoscalar mesons in the mass basis *)
  S[1] == { ClassName -> pi,   SelfConjugate -> False, Mass -> {MPi, 0.140}, Width -> 0, PDG -> 211},
  S[2] == { ClassName -> pi0,  SelfConjugate -> True,  Mass -> {MPi0,0.135}, Width -> 0, PDG -> 111},
  S[3] == { ClassName -> ka ,  SelfConjugate -> False, Mass -> {MKa ,0.494}, Width -> 0, PDG -> 321},
  S[4] == { ClassName -> ka0,  SelfConjugate -> True,  Mass -> {MKa ,0.498}, Width -> 0, PDG -> 311},
  S[5] == { ClassName -> eta,  SelfConjugate -> True,  Mass -> 0.547,        Width -> 0, PDG -> 221},
  S[6] == { ClassName -> etap, SelfConjugate -> True,  Mass -> 0.958,        Width -> 0, PDG -> 331},

(* Unphysical Goldstone bosons field *)

  S[100] == {
    ClassName        -> Pion,
    Unphysical       -> True,
    SelfConjugate    -> True,
    Indices          -> {Generation, Generation},
    Definitions      -> {
          Pion[1,1] -> pi[3]/2 + (Cos[Th] eta + Sin[Th] etap)/(2 Sqrt[3]), 
          Pion[1,2] -> Sqrt[2]*pi[1],                                      
          Pion[1,3] -> Sqrt[2]/2*Kap,
          Pion[2,1] -> Sqrt[2]/2*pi[2],                                    
          Pion[2,2] -> -pi[3]/2 + (Cos[Th] eta + Sin[Th] etap)/(2 Sqrt[3]), 
          Pion[2,3] -> Sqrt[2]*Ka0, 
          Pion[3,1] -> Sqrt[2]/2*Kapbar,                                   
          Pion[3,2] -> Sqrt[2]/2*Ka0bar,                                    
          Pion[3,3] ->  - (Cos[Th] eta + Sin[Th] etap)/Sqrt[3] }
}
          
}

(* -------------------------------- *)
(* ---------- Parameters  --------- *)
(* -------------------------------- *)

M$Parameters = {

  (* SM inputs *)
  aEWM1 == { ParameterType -> External, BlockName -> SMINPUTS, OrderBlock -> 1, Value -> 127.9,       InteractionOrder -> {QED,-2} },
  Gf    == { ParameterType -> External, BlockName -> SMINPUTS, OrderBlock -> 2, Value -> 1.16637*^-5, InteractionOrder -> {QED,2}, TeX -> Subscript[G,f]},
  aS    == { ParameterType -> External, BlockName -> SMINPUTS, OrderBlock -> 3, Value -> 0.1184,      InteractionOrder -> {QCD,2}, TeX -> Subscript[\[Alpha],s]},

  (* EW parameters *)
  MW  == { ParameterType -> Internal, Value -> Sqrt[MZ^2/2+Sqrt[MZ^4/4-Pi/Sqrt[2]*aEW/Gf*MZ^2]], TeX -> Subscript[M,W]},
  sw2 == { ParameterType -> Internal, Value -> 1-(MW/MZ)^2},
  cw  == { ParameterType -> Internal, Value -> Sqrt[1-sw2],                                      TeX -> Subscript[c,w]},
  sw  == { ParameterType -> Internal, Value -> Sqrt[sw2],                                        TeX -> Subscript[s,w]},
  ee  == { ParameterType -> Internal, Value -> Sqrt[4 Pi/aEWM1],                                 TeX -> e,              InteractionOrder -> {QED,1}},
  g1  == { ParameterType -> Internal, Value -> ee/cw,                                            TeX -> Subscript[g,1], InteractionOrder -> {QED,1}},
  g2  == { ParameterType -> Internal, Value -> ee/sw,                                            TeX -> Subscript[g,2], InteractionOrder -> {QED,1}},
  gs  == { ParameterType -> Internal, Value -> Sqrt[4 Pi aS],                                    TeX -> Subscript[g,s], InteractionOrder -> {QCD,1}, ParameterName -> G},

  (* Chiral parameters *)
  fp  == { ParameterType -> External, Value -> 0.14,    TeX -> Subscript[f,\[Pi]]},
  th  == { ParameterType -> External, Value -> -0.4712, TeX -> \[Theta] },
  cth == { ParameterType -> Internal, Value -> Cos[th], TeX -> Subscript[c,\[Theta]]},
  sth == { ParameterType -> Internal, Value -> Sin[th], TeX -> Subscript[s,\[Theta]]},
};

(* -------------------------------- *)
(* ---------- Matrices  ----------- *)
(* -------------------------------- *)

SquaredMat[n_,i_,j_] := Module[{kk},
  Switch[n,
      0, Return[KroneckerDelta[i,j]], 1, Return[Pion[i,j]], 2, Return[Pion[i,kk] Pion[kk,j]],
     _, Return[SquaredMat[Pion, n-1, i,kk] Pion[kk,j]]
  ];
];

U[ii_,jj_]    := SquaredMat[0,ii,jj] + Sum[(  2 I/fp SquaredMat[k,ii,jj] )/(k!), {k, 1, 1}] ; 
Ubar[ii_,jj_] := SquaredMat[0,ii,jj] + Sum[( -2 I/fp SquaredMat[k,ii,jj] )/(k!), {k, 1, 1}] ; 

(* -------------------------------- *)
(* ---------- Lagrangian  --------- *)
(* -------------------------------- *)

Lkin := Block[{ii,jj}, fp^2/8 ExpandIndices[ DC[U[ii,jj],mu] * DC[Ubar[jj,ii],mu] ] ] ; 

Lmass := Block[{ii,jj,ll}, fp^2/8  ExpandIndices[ Mm[ii,ii] SquaredMat[2,ii,ii]] ]; (* mass matrix is diag so only need ii,ii terms *) 

Lanom := Block[{ii,jj,ll}, - fp^2/6 ExpandIndices[ SquaredMat[1,jj,ii].SquaredMat[1,ii,ll] ]];

LQCD := Lkin + Lmass + Lanom; 

